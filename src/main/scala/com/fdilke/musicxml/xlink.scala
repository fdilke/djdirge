// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.fdilke.musicxml


/** MusicXML??? XLink module

Version 3.0

Copyright ?? 2004-2011 MakeMusic, Inc.
http://www.makemusic.com/

This MusicXML??? work is being provided by the copyright holder under the MusicXML Public License Version 3.0, available from:

	http://www.musicxml.org/dtds/license.html
	
This is the W3C XML Schema (XSD) version of the MusicXML 3.0 language. Validation is tightened by moving MusicXML definitions from comments into schema data types and definitions. Character entities and other entity usages that are not supported in W3C XML Schema have also been removed. However, the features of W3C XML Schema make it easier to define variations of the MusicXML format, either via extension or restriction.
	
This schema module defines the subset of XLink attributes that are supported in the MusicXML schema. All definitions here are in the XLink namespace.
*/

trait Type

object Type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Type = value match {
    case "simple" => Simple
    case other =>
      println("ZZZ type: unknown string [" + other + "], returning Simple")
      Simple
  }
}

case object Simple extends Type { override def toString = "simple" }

trait Show

object Show {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Show = value match {
    case "new" => New
    case "replace" => Replace
    case "embed" => Embed
    case "other" => OtherValue5
    case "none" => NoneTypeValue15
    case other =>
      println("ZZZ show: unknown string [" + other + "], returning NoneTypeValue15")
      NoneTypeValue15
  }
}

case object New extends Show { override def toString = "new" }
case object Replace extends Show { override def toString = "replace" }
case object Embed extends Show { override def toString = "embed" }
case object OtherValue5 extends Show { override def toString = "other" }
case object NoneTypeValue15 extends Show { override def toString = "none" }

trait Actuate

object Actuate {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Actuate = value match {
    case "onRequest" => OnRequest
    case "onLoad" => OnLoad
    case "other" => OtherValue6
    case "none" => NoneTypeValue16

  }
}

case object OnRequest extends Actuate { override def toString = "onRequest" }
case object OnLoad extends Actuate { override def toString = "onLoad" }
case object OtherValue6 extends Actuate { override def toString = "other" }
case object NoneTypeValue16 extends Actuate { override def toString = "none" }

